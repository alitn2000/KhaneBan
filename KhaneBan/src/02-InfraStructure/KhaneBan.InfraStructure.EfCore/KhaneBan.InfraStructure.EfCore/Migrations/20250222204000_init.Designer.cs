// <auto-generated />
using System;
using KhaneBan.InfraStructure.EfCore.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KhaneBan.InfraStructure.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250222204000_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertHomeService", b =>
                {
                    b.Property<int>("ExpertsId")
                        .HasColumnType("int");

                    b.Property<int>("HomeServicesId")
                        .HasColumnType("int");

                    b.HasKey("ExpertsId", "HomeServicesId");

                    b.HasIndex("HomeServicesId");

                    b.ToTable("ExpertHomeService");

                    b.HasData(
                        new
                        {
                            ExpertsId = 1,
                            HomeServicesId = 1
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.BaseEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Title = "مشهد"
                        },
                        new
                        {
                            Id = 3,
                            Title = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "شیراز"
                        },
                        new
                        {
                            Id = 5,
                            Title = "تبریز"
                        },
                        new
                        {
                            Id = 6,
                            Title = "کرج"
                        },
                        new
                        {
                            Id = 7,
                            Title = "قم"
                        },
                        new
                        {
                            Id = 8,
                            Title = "اهواز"
                        },
                        new
                        {
                            Id = 9,
                            Title = "اردبیل"
                        },
                        new
                        {
                            Id = 10,
                            Title = "کرمانشاه"
                        },
                        new
                        {
                            Id = 11,
                            Title = "زاهدان"
                        },
                        new
                        {
                            Id = 12,
                            Title = "ارومیه"
                        },
                        new
                        {
                            Id = 13,
                            Title = "یزد"
                        },
                        new
                        {
                            Id = 14,
                            Title = "همدان"
                        },
                        new
                        {
                            Id = 15,
                            Title = "قزوین"
                        },
                        new
                        {
                            Id = 16,
                            Title = "سنندج"
                        },
                        new
                        {
                            Id = 17,
                            Title = "بندرعباس"
                        },
                        new
                        {
                            Id = 18,
                            Title = "زنجان"
                        },
                        new
                        {
                            Id = 19,
                            Title = "ساری"
                        },
                        new
                        {
                            Id = 20,
                            Title = "بوشهر"
                        },
                        new
                        {
                            Id = 21,
                            Title = "مازندران"
                        },
                        new
                        {
                            Id = 22,
                            Title = "گرگان"
                        },
                        new
                        {
                            Id = 23,
                            Title = "کرمان"
                        },
                        new
                        {
                            Id = 24,
                            Title = "خرم آباد"
                        },
                        new
                        {
                            Id = 25,
                            Title = "سمنان"
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.BaseEntities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Expert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Experts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "test1",
                            Balance = 10000.0,
                            CityId = 1,
                            ConcurrencyStamp = "1168BED7-A787-44E1-A869-7D150A038915",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIXLEm46RkH6fXwCGP5tGUZIaSn4mYQIGHPeEURJ5JBu7dqolo+4Lpm9TeTdI811pA==",
                            PhoneNumber = "09102123542",
                            PhoneNumberConfirmed = false,
                            PicturePath = "desktop",
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "1168BED7-A787-44E1-A869-7D150A038916",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "test2",
                            Balance = 20000.0,
                            CityId = 1,
                            ConcurrencyStamp = "5780E9A6-7966-48F0-AC09-20FA8EA4B212",
                            Email = "alitn2000@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ali",
                            IsDeleted = false,
                            LastName = "Tahmasebinia",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALITN2000@GMAIL.COM",
                            NormalizedUserName = "ALITN2000",
                            PasswordHash = "AQAAAAIAAYagAAAAEBiTX3t2L4KuPdP2wrEDSh8rtG+q0Cq2RV6ksv4v01ynxUFYZ9vQCw76fZJYCoQ+sA==",
                            PhoneNumber = "09022004453",
                            PhoneNumberConfirmed = false,
                            PicturePath = "desktop1",
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5780E9A6-7966-48F0-AC09-20FA8EA4B213",
                            TwoFactorEnabled = false,
                            UserName = "alitn2000"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "test3",
                            Balance = 20000.0,
                            CityId = 1,
                            ConcurrencyStamp = "3FEB408E-2E7D-4BB9-B80C-12A88348057D",
                            Email = "reza2000@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Reza",
                            IsDeleted = false,
                            LastName = "Rezaei",
                            LockoutEnabled = false,
                            NormalizedEmail = "REZA2000@GMAIL.COM",
                            NormalizedUserName = "REZA2000",
                            PasswordHash = "AQAAAAIAAYagAAAAEMI0I5CQ5xtC+zAf8ZG1NRDYFpeqQ2QEjeynHaZVG1g3xEl6E3SB3UH8zavrhnQsGw==",
                            PhoneNumber = "09102123543",
                            PhoneNumberConfirmed = false,
                            PicturePath = "desktop2",
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3FEB408E-2E7D-4BB9-B80C-12A88348057E",
                            TwoFactorEnabled = false,
                            UserName = "reza2000"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "test4",
                            Balance = 20000.0,
                            CityId = 1,
                            ConcurrencyStamp = "1DBE15F3-BB61-4FC0-87EE-5383DC66CF51",
                            Email = "sara2000@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Sara",
                            IsDeleted = false,
                            LastName = "Saraei",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARA2000@GMAIL.COM",
                            NormalizedUserName = "SARA2000",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2q3Z6RpePXubbcChzaBLnD8er+NOo279d4llekIrqwOKlTNXx3ziF00O4O1/Q4Bw==",
                            PhoneNumber = "09102123545",
                            PhoneNumberConfirmed = false,
                            PicturePath = "desktop3",
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "1DBE15F3-BB61-4FC0-87EE-5383DC66CF52",
                            TwoFactorEnabled = false,
                            UserName = "sara2000"
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تمیزکاری"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ساختمان"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تعمیرات اشیا"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "اسباب کشی و حمل بار"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "خودرو"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "سلامت و زیبایی"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "سازمان ها و مجتمع ها"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "سایر"
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.HomeService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("HomeServices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 1,
                            Title = "نقاشی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 1,
                            Title = "نظافت راه پله",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 2,
                            Title = "قالیشویی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 2,
                            Title = "پرده شویی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 3,
                            Title = "سرامیک خودرو",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 3,
                            Title = "صفرشویی خودرو",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 4,
                            Title = "تعمیر و سرویس کولر آبی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 4,
                            Title = "کانال سازی کولر",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 4,
                            Title = "تعمیر و نگهداری موتورخانه",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "سنگ کاری",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "بنایی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "کلیدسازی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 5,
                            Title = "کفسابی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 6,
                            Title = "خدمات لوله کشی ساختمان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 6,
                            Title = "تخلیه چاه و لوله بازکنی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 6,
                            Title = "لوله کشی آب و فاضلاب",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 17,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 7,
                            Title = "مشاوره و بازسازی ساختمان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 18,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 7,
                            Title = "دکوراسیون و طراحی ساختمان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 19,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 8,
                            Title = "خدمات باغبانی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 20,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 8,
                            Title = "کاشت و تعویض گلدان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 21,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 9,
                            Title = "تعمیرات مبلمان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 22,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 9,
                            Title = "تعمیرات مبلمان اداری",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 23,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 10,
                            Title = "تعمیر پنکه",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 24,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 10,
                            Title = "نصب و تعمیر فر",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 25,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 11,
                            Title = "تعمیر کامپیوتر و لپ تاپ",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 26,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 11,
                            Title = "مودم و اینترنت",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 27,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 12,
                            Title = "خدمات تعمیر موبایل",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 28,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 12,
                            Title = "خدمات خرید موبایل و کالاهای دیجیتال",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 29,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 12,
                            Title = "خدمات دوربین",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 30,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 13,
                            Title = "اسباب کشی با خاور و کامیون",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 31,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 13,
                            Title = "اسباب کشی با وانت و نیسان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 32,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 13,
                            Title = "کارگر جابه جایی",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 33,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 14,
                            Title = "تعویض باتری خودرو",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 34,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 14,
                            Title = "باتری به باتری",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 35,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 14,
                            Title = "حمل خودرو",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 36,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 14,
                            Title = "تعویض وایر و شمع خودرو",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 37,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 15,
                            Title = "براشینگ موی بانوان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 38,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 15,
                            Title = "کوتاهی موی بانوان",
                            VisitCount = 120
                        },
                        new
                        {
                            Id = 39,
                            BasePrice = 100.0,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubCategoryId = 15,
                            Title = "بافت موی بانوان در خانه",
                            VisitCount = 120
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpertId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "اوکی",
                            CustomerId = 1,
                            ExpertId = 1,
                            IsDeleted = false,
                            Rate = 5.0,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "اوکی",
                            CustomerId = 2,
                            ExpertId = 1,
                            IsDeleted = false,
                            Rate = 5.0,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HomeServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("HomeServiceId");

                    b.HasIndex("RatingId")
                        .IsUnique()
                        .HasFilter("[RatingId] IS NOT NULL");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CustomerId = 1,
                            Description = "نقاشی 4 طبقه",
                            HomeServiceId = 1,
                            IsDeleted = false,
                            RatingId = 1,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            RequestedDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "نقاشی"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            CustomerId = 2,
                            Description = "نقاشی 2 طبقه",
                            HomeServiceId = 1,
                            IsDeleted = false,
                            RatingId = 2,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestStatus = 6,
                            RequestedDate = new DateTime(2025, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "نقاشی"
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "نظافت و پذیرایی"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "شستشو"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "کارواش و دیتیلینگ"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "سرمایش و گرمایش"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تعمیرات ساختمان"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "لوله کشی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "طراحی و بازسازی ساختمان"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "باغبانی و فضای سبز"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "چوب و کابینت"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "نصب و تعمیر لوازم خانگی"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "خدمات کامپیوتری"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تعمیرات موبایل"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "باربری و جابجایی"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "خدمات و تعمیرات خودرو"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 6,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "زیبایی بانوان"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "پزشکی و پرستاری"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "حیوانات خانگی"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تندرستی و ورزش"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 7,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "خدمات شرکتی"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 7,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "تامین نیروی انسانی"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 8,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "خیاطی و تعمیرات لباس"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 8,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "مجالس و رویدادها"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 8,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "آموزش"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 8,
                            IsDeleted = false,
                            RegisterAt = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "کودک"
                        });
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExpertId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SuggestionStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("RequestId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ارزون",
                            ExpertId = 1,
                            IsDeleted = false,
                            Price = 5000.0,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 1,
                            StartDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SuggestionStatus = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "گرون",
                            ExpertId = 1,
                            IsDeleted = false,
                            Price = 6000.0,
                            RegisterDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestId = 2,
                            StartDate = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SuggestionStatus = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Expert",
                            NormalizedName = "EXPERT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpertHomeService", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.Expert", null)
                        .WithMany()
                        .HasForeignKey("ExpertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.HomeService", null)
                        .WithMany()
                        .HasForeignKey("HomeServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.BaseEntities.Picture", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.Request", "Request")
                        .WithMany("Pictures")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Admin", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("KhaneBan.Domain.Core.Entites.User.Admin", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Customer", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("KhaneBan.Domain.Core.Entites.User.Customer", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Expert", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", "User")
                        .WithOne("Expert")
                        .HasForeignKey("KhaneBan.Domain.Core.Entites.User.Expert", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.User", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.BaseEntities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.HomeService", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.SubCategory", "SubCategory")
                        .WithMany("HomeServices")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Rating", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.User.Expert", "Expert")
                        .WithMany("Ratings")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Request", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.BaseEntities.City", "City")
                        .WithMany("Requests")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.User.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.HomeService", "HomeService")
                        .WithMany("Requests")
                        .HasForeignKey("HomeServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.Rating", "Rating")
                        .WithOne("Request")
                        .HasForeignKey("KhaneBan.Domain.Core.Entites.UserRequests.Request", "RatingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("HomeService");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.SubCategory", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Suggestion", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.Expert", "Expert")
                        .WithMany("Suggestions")
                        .HasForeignKey("ExpertId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.UserRequests.Request", "Request")
                        .WithMany("Suggestions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expert");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("KhaneBan.Domain.Core.Entites.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.BaseEntities.City", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Customer", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.Expert", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.User.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.HomeService", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Rating", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.Request", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("KhaneBan.Domain.Core.Entites.UserRequests.SubCategory", b =>
                {
                    b.Navigation("HomeServices");
                });
#pragma warning restore 612, 618
        }
    }
}
